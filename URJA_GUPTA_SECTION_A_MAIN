{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 836,
   "id": "61d9afc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import scipy as s\n",
    "import sympy as sy\n",
    "from sympy import *\n",
    "from scipy import integrate\n",
    "import math\n",
    "from math import exp, pi, sqrt, log\n",
    "from scipy.integrate import quad\n",
    "from scipy.stats import norm\n",
    "from scipy.misc import derivative\n",
    "\n",
    "plt.rcParams.update(\n",
    "    {\n",
    "        'text.usetex': False,\n",
    "        'font.family': 'stixgeneral',\n",
    "        'mathtext.fontset': 'stix',\n",
    "    }\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 837,
   "id": "52b08c5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining functions to analyse Black-Scholes-Merton Model\n",
    "\n",
    "def d1(x):\n",
    "    return (((log(x/k)) + (r + ((𝜎**2)/2)*(T-t)))/(𝜎*(sqrt(T-t))))\n",
    "\n",
    "def d2(x):\n",
    "    return (d1(x) - 𝜎*(sqrt(T-t)))\n",
    "\n",
    "# CDF of the standard normal distribution\n",
    "def N(x):\n",
    "    return s.stats.norm.cdf(x)\n",
    "\n",
    "#  BSM price of a call option at time 𝑡 and stock price 𝑆𝑡 (in $)\n",
    "def C(x):\n",
    "    return ((N(d1(x)))*x - (N(d2(x)))*k*exp(-r*(T-t)))\n",
    "\n",
    "#  BSM price of a put option at time 𝑡 and stock price 𝑆𝑡(in $)\n",
    "def P(x):\n",
    "    return N(-d2(x))*k*exp((-r*(T-t))) - N(-d1(x))*x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b28b94a",
   "metadata": {},
   "source": [
    "Q3. b."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b9972b7",
   "metadata": {},
   "source": [
    "For 3 given points in time (𝑡 = 0, 0.5 𝑎𝑛𝑑 1 𝑦𝑒𝑎𝑟𝑠 𝑟𝑒𝑠𝑝𝑒𝑐𝑡𝑖𝑣𝑒𝑙𝑦), below is the plot of the BSM price of a call option 𝐶, with stock price 𝑆𝑡 as the x-axis; consider the range of 𝑆𝑡 to be from $1 to $100, 𝐾 = $50, 𝑟 = 12 % p.a., 𝜎 = 0.30, 𝑇 = 1 year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 838,
   "id": "3ee40a85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Option strike price (in $)\n",
    "k = 50\n",
    "\n",
    "#  annual risk free rate of interest\n",
    "𝑟 = 0.12\n",
    "\n",
    "# Stock volatility\n",
    "𝜎 = 0.30\n",
    "\n",
    "# Time to maturity\n",
    "𝑇 = 1\n",
    "\n",
    "# Evenly sampled Stock price at time 𝑡 (in $)\n",
    "St = np.linspace(1, 100, 100)\n",
    "\n",
    "fC = np.vectorize(C)\n",
    "fP = np.vectorize(P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 839,
   "id": "1f367f63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Case 1\n",
    "\n",
    "t = 0\n",
    "\n",
    "plt.plot(St, fC(St))\n",
    "\n",
    "plt.xlabel('option price/premium (in $)')\n",
    "plt.ylabel('stock price (in $)')\n",
    "plt.title('BSM price of a call option 𝐶')\n",
    "plt.legend(['t = 0'])\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 840,
   "id": "111b29b6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Case 2\n",
    "\n",
    "t = 0.5\n",
    "\n",
    "plt.plot(St, fC(St))\n",
    "\n",
    "plt.xlabel('option price/premium (in $)')\n",
    "plt.ylabel('stock price (in $)')\n",
    "plt.title('BSM price of a call option 𝐶')\n",
    "plt.legend(['t = 0.5'])\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 841,
   "id": "62f43b39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Case 3\n",
    "\n",
    "t = 1\n",
    "\n",
    "# As t->T, we use the equation derived in the part (a) of the question.\n",
    "f2 = St - k;\n",
    "\n",
    "plt.plot(St, f2)\n",
    "\n",
    "plt.xlabel('option price/premium (in $)')\n",
    "plt.ylabel('stock price (in $)')\n",
    "plt.title('BSM price of a call option 𝐶')\n",
    "plt.legend(['t = 1'])\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae38b662",
   "metadata": {},
   "source": [
    "Now, plotting the BSM price of a put option 𝑃 vs. 𝑆𝑡 at the same time points and parameters as mentioned above."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "389dd1b8",
   "metadata": {},
   "source": [
    "Q3. c."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 842,
   "id": "7041271e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Case 4\n",
    "\n",
    "t = 0\n",
    "\n",
    "plt.plot(St, fP(St))\n",
    "\n",
    "plt.xlabel('option price/premium (in $)')\n",
    "plt.ylabel('stock price (in $)')\n",
    "plt.title('BSM price of a put option P')\n",
    "plt.legend(['t = 0'])\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 843,
   "id": "9c7c416d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Case 5\n",
    "\n",
    "t = 0.5\n",
    "\n",
    "plt.plot(St, fP(St))\n",
    "\n",
    "plt.xlabel('option price/premium (in $)')\n",
    "plt.ylabel('stock price (in $)')\n",
    "plt.title('BSM price of a put option P')\n",
    "plt.legend(['t = 0.5'])\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 844,
   "id": "a17d9acb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Case 6\n",
    "\n",
    "t = 1\n",
    "\n",
    "# As t->T, we use the equation derived in the part (a) of the question.\n",
    "f3 = St - St\n",
    "\n",
    "plt.plot(St, f3)\n",
    "\n",
    "plt.xlabel('option price/premium (in $)')\n",
    "plt.ylabel('stock price (in $)')\n",
    "plt.title('BSM price of a put option P')\n",
    "plt.legend(['t = 1'])\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cf360c0",
   "metadata": {},
   "source": [
    "Q4. a.\n",
    "\n",
    "Analytical Calculation of Delta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 845,
   "id": "a17c56b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def diff_C(St, time):\n",
    "    global t\n",
    "    t = time\n",
    "    return (((exp(-(d1(St)*d1(St))/(2*𝜎*𝜎)))/(𝜎*(sqrt(T-t))*sqrt(2*pi*𝜎*𝜎))) - (k*k*exp(-(r*(T-t))-(d2(St)*d2(St)/(2*𝜎*𝜎))))/(𝜎*(sqrt(T-t))*sqrt(2*pi*𝜎*𝜎)*St) + N(d1(St)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14edb845",
   "metadata": {},
   "source": [
    "It is important to note that the first two terms in the returned expression for diff_C are negligible. This concludes that **diff_C is N(d1(St))**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 846,
   "id": "875fc449",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9998435037893203"
      ]
     },
     "execution_count": 846,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 1 (Analytical Solution)\n",
    "\n",
    "time = 0\n",
    "\n",
    "del_C_T1 = diff_C(125, time)\n",
    "\n",
    "del_C_T1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 847,
   "id": "711aeef7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9999996999537609"
      ]
     },
     "execution_count": 847,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 2 (Analytical Solution)\n",
    "\n",
    "time = 0.5\n",
    "\n",
    "del_C_T2 = diff_C(125, time)\n",
    "\n",
    "del_C_T2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 848,
   "id": "173ccee2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 848,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 3 (Analytical Solution)\n",
    "\n",
    "time = 1\n",
    "\n",
    "del_C_T3 = 1\n",
    "\n",
    "del_C_T3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 849,
   "id": "226ea126",
   "metadata": {},
   "outputs": [],
   "source": [
    "def diff_P(St, time):\n",
    "    global t\n",
    "    t = time\n",
    "    return - 1 + N(d1(St))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f3405c4",
   "metadata": {},
   "source": [
    "It is important to note that **diff_P concludes to -N(-d1(St))**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 850,
   "id": "06fd1fbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.00015649621067970187"
      ]
     },
     "execution_count": 850,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 4 (Analytical Solution)\n",
    "\n",
    "time = 0\n",
    "\n",
    "del_P_T1 = diff_P(125, time)\n",
    "\n",
    "del_P_T1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 851,
   "id": "8c4314d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-3.0004623907675665e-07"
      ]
     },
     "execution_count": 851,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 5 (Analytical Solution)\n",
    "\n",
    "time = 0.5\n",
    "\n",
    "del_P_T2 = diff_P(125, time)\n",
    "\n",
    "del_P_T2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 852,
   "id": "f62cf68d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 852,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 6 (Analytical Solution)\n",
    "\n",
    "t = 1\n",
    "\n",
    "del_P_T3 = 0\n",
    "\n",
    "del_P_T3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc8ddc24",
   "metadata": {},
   "source": [
    "Q4. b.\n",
    "\n",
    "Numerical Calculation of Delta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 853,
   "id": "0a6e8c68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9998432248412712"
      ]
     },
     "execution_count": 853,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 1 (Numerical Calculation)\n",
    "\n",
    "t = 0\n",
    "\n",
    "# Slope from the equation of graph\n",
    "delta_C_T1 = derivative(C, 125)\n",
    "\n",
    "delta_C_T1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 854,
   "id": "287b591b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9999992424638364"
      ]
     },
     "execution_count": 854,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 2 (Numerical Calculation)\n",
    "\n",
    "t = 0.5\n",
    "\n",
    "# Slope from the equation of graph\n",
    "delta_C_T2 = derivative(C, 125)\n",
    "\n",
    "delta_C_T2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 855,
   "id": "59497e2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 855,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 3 (Numerical Calculation)\n",
    "\n",
    "t = 1\n",
    "\n",
    "# Taking slope by differentiating the dervied equation\n",
    "delta_C_T3 = 1\n",
    "\n",
    "delta_C_T3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 856,
   "id": "31dd7111",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.00015677515871973316\n"
     ]
    }
   ],
   "source": [
    "# Case 4 (Numerical Calculation)\n",
    "\n",
    "t = 0\n",
    "\n",
    "# Slope from the equation of graph\n",
    "delta_P_T1 = derivative(P, 125)\n",
    "\n",
    "print(delta_P_T1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 857,
   "id": "facb8d71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-7.575361513627405e-07"
      ]
     },
     "execution_count": 857,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 5 (Numerical Calculation)\n",
    "\n",
    "t = 0.5\n",
    "\n",
    "# Slope from the equation of graph\n",
    "delta_P_T2 = derivative(P, 125)\n",
    "\n",
    "delta_P_T2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 858,
   "id": "fc1a5853",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 858,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 6 (Numerical Calculation)\n",
    "\n",
    "t = 1\n",
    "\n",
    "# Taking slope by differentiating the dervied equation\n",
    "delta_P_T3 = 0\n",
    "\n",
    "delta_P_T3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 859,
   "id": "c503b070",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error% in Case 1 =  2.7899178808574987e-05\n",
      "Error% in Case 2 =  4.574902710645463e-05\n",
      "Error% in Case 4 =  0.17792872436503807\n",
      "Error% in Case 5 =  60.39182571854822\n"
     ]
    }
   ],
   "source": [
    "# Error in Case 1\n",
    "\n",
    "Err_1 = (abs((del_C_T1 - delta_C_T1)/delta_C_T1))*100\n",
    "\n",
    "print(\"Error% in Case 1 = \", Err_1)\n",
    "\n",
    "\n",
    "# Error in Case 2\n",
    "\n",
    "Err_2 = (abs((del_C_T2 - delta_C_T2)/delta_C_T2))*100\n",
    "\n",
    "print(\"Error% in Case 2 = \", Err_2)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Error in Case 4\n",
    "\n",
    "Err_4 = (abs((del_P_T1 - delta_P_T1)/delta_P_T1))*100\n",
    "\n",
    "print(\"Error% in Case 4 = \", Err_4)\n",
    "\n",
    "\n",
    "# Error in Case 5\n",
    "\n",
    "Err_5 = (abs((del_P_T2 - delta_P_T2)/delta_P_T2))*100\n",
    "\n",
    "print(\"Error% in Case 5 = \", Err_5)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1f103f3",
   "metadata": {},
   "source": [
    "Q5.\n",
    "\n",
    "**Delta Hedging**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac4c15aa",
   "metadata": {},
   "source": [
    "<br> Delta for Long Call is taken as positive. </br>\n",
    "<br> Delta for Short Call is taken as negative. </br>\n",
    "<br> Delta for Long Put is taken as negative. </br>\n",
    "<br> Delta for Short Put is taken as positive. </br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 860,
   "id": "82994b31",
   "metadata": {},
   "outputs": [],
   "source": [
    "𝑟 = 0.12\n",
    "𝜎 = 0.30\n",
    "𝑇 = 1\n",
    "t = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 861,
   "id": "14188dfe",
   "metadata": {},
   "outputs": [],
   "source": [
    "def delta_call(St, ST):\n",
    "    global k \n",
    "    k = ST\n",
    "    return derivative(C, St)\n",
    "\n",
    "def delta_put(St, ST):\n",
    "    global k\n",
    "    k = ST\n",
    "    return derivative(P, St)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98977ae2",
   "metadata": {},
   "source": [
    "Q5. a.\n",
    "\n",
    "**Digital Payoff**\n",
    "\n",
    "Equivalent Linear Combination:\n",
    "\n",
    "Long call option at Strike 40 + Short call option at Strike 60\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 862,
   "id": "f1b14fd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "St_i = 30\n",
    "St_ii = 50\n",
    "St_iii = 70"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 863,
   "id": "907b96f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.30195762539611826"
      ]
     },
     "execution_count": 863,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case i\n",
    "\n",
    "del_i = delta_call(St_i, 40) - delta_call(St_i, 60)\n",
    "\n",
    "del_i"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d077fe9f",
   "metadata": {},
   "source": [
    "**Riskless Portfolio for St = 30**\n",
    "\n",
    "As we can see, delta for the above combination of options is positive.\n",
    "\n",
    "Hence, We can **short (del_i*n) units** of the underlying stock directly, your total exposure to the market (called a portfolio) will have **n units of the digital option and (del_i*n) of stock.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 864,
   "id": "3e1471f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4250237324091497"
      ]
     },
     "execution_count": 864,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case ii\n",
    "\n",
    "del_ii = delta_call(St_ii, 40) - delta_call(St_ii, 60)\n",
    "\n",
    "del_ii"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7f7afb9",
   "metadata": {},
   "source": [
    "**Riskless Portfolio for St = 50**\n",
    "\n",
    "As we can see, delta for the above combination of options is positive.\n",
    "\n",
    "Hence, We can **short (del_ii*n) units** of the underlying stock directly, your total exposure to the market (called a portfolio) will have **n units of the digital option and (del_ii*n) of stock.**\n",
    "\n",
    "In this case, we will short more stocks than case i."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 865,
   "id": "ac626c96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1359369195541582"
      ]
     },
     "execution_count": 865,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case iii\n",
    "\n",
    "del_iii = delta_call(St_iii, 40) - delta_call(St_iii, 60)\n",
    "\n",
    "del_iii"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edf0d1b8",
   "metadata": {},
   "source": [
    "**Riskless Portfolio for St = 70**\n",
    "\n",
    "As we can see, delta for the above combination of options is positive.\n",
    "\n",
    "Hence, We can **short (del_iii*n) units** of the underlying stock directly, your total exposure to the market (called a portfolio) will have **n units of the digital option and (del_iii*n) of stock.**\n",
    "\n",
    "In this case, we will buy even more stocks than case ii."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 866,
   "id": "c3f8a4a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "st_array = np.array([30, 50, 70])\n",
    "delta_array = np.array([del_i, del_ii, del_iii])\n",
    "\n",
    "plt.plot(st_array, delta_array)\n",
    "plt.scatter(st_array, delta_array, color = 'red')\n",
    "plt.xlim(0,80)\n",
    "plt.ylim(0,1)\n",
    "plt.xlabel('Stock Price at time t (in $)')\n",
    "plt.ylabel('Delta')\n",
    "plt.title('Delta Hedging')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea37c312",
   "metadata": {},
   "source": [
    "Q5. b.\n",
    "\n",
    "**Corridor Option Payoff**\n",
    "\n",
    "Equivalent Linear Combination:\n",
    "\n",
    "Long call option at Strike 20 + Short call option at Strike 40 + Long put option at Strike 60 + Short put option at Strike 80\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 867,
   "id": "a53ff9f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.04140507178631403"
      ]
     },
     "execution_count": 867,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case i\n",
    "\n",
    "St = 10\n",
    "\n",
    "del_i = delta_call(St, 20) - delta_call(St, 40) + delta_put(St, 60) - delta_put(St, 80)\n",
    "\n",
    "del_i"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c19cc22",
   "metadata": {},
   "source": [
    "**Riskless Portfolio for St = 10**\n",
    "\n",
    "As we can see, delta for the above combination of options is positive.\n",
    "\n",
    "Hence, We can **short (del_i*n) units** of the underlying stock directly, your total exposure to the market (called a portfolio) will have **n units of the digital option and (del_i*n) of stock.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 868,
   "id": "1c1d0c7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6658114011307994"
      ]
     },
     "execution_count": 868,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case ii\n",
    "\n",
    "St = 30\n",
    "\n",
    "del_ii = delta_call(St, 20) - delta_call(St, 40) + delta_put(St, 60) - delta_put(St, 80)\n",
    "\n",
    "del_ii"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fc974f3",
   "metadata": {},
   "source": [
    "**Riskless Portfolio for St = 30**\n",
    "\n",
    "As we can see, delta for the above combination of options is positive.\n",
    "\n",
    "Hence, We can **short (del_ii*n) units** of the underlying stock directly, your total exposure to the market (called a portfolio) will have **n units of the digital option and (del_ii*n) of stock.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 869,
   "id": "c6c5566b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.42003862136533243"
      ]
     },
     "execution_count": 869,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case iii\n",
    "\n",
    "St = 50\n",
    "\n",
    "del_iii = delta_call(St, 20) - delta_call(St, 40) + delta_put(St, 60) - delta_put(St, 80)\n",
    "\n",
    "del_iii"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27876eb1",
   "metadata": {},
   "source": [
    "**Riskless Portfolio for St = 50**\n",
    "\n",
    "As we can see, delta for the above combination of options is positive.\n",
    "\n",
    "Hence, We can **short (del_iii*n) units** of the underlying stock directly, your total exposure to the market (called a portfolio) will have **n units of the digital option and (del_iii*n) of stock.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 870,
   "id": "2003b330",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.32235202614604397"
      ]
     },
     "execution_count": 870,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case iv\n",
    "\n",
    "St = 70\n",
    "\n",
    "del_iv = delta_call(St, 20) - delta_call(St, 40) + delta_put(St, 60) - delta_put(St, 80)\n",
    "\n",
    "del_iv"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cff6258",
   "metadata": {},
   "source": [
    "**Riskless Portfolio for St = 70**\n",
    "\n",
    "As we can see, delta for the above combination of options is positive.\n",
    "\n",
    "Hence, We can **short (del_iv*n) units** of the underlying stock directly, your total exposure to the market (called a portfolio) will have **n units of the digital option and (del_iv*n) of stock.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 871,
   "id": "673dcad1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1449373252902968"
      ]
     },
     "execution_count": 871,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Case v\n",
    "\n",
    "St = 90\n",
    "\n",
    "del_v = delta_call(St, 20) - delta_call(St, 40) + delta_put(St, 60) - delta_put(St, 80)\n",
    "\n",
    "del_v"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "133f6f7e",
   "metadata": {},
   "source": [
    "**Riskless Portfolio for St = 90**\n",
    "\n",
    "As we can see, delta for the above combination of options is positive.\n",
    "\n",
    "Hence, We can **short (del_v*n) units** of the underlying stock directly, your total exposure to the market (called a portfolio) will have **n units of the digital option and (del_v*n) of stock.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 872,
   "id": "bf0e0949",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Case 1\n",
    "\n",
    "st_array = np.array([10, 30, 50, 70, 90])\n",
    "delta_array = np.array([del_i, del_ii, del_iii, del_iv, del_v])\n",
    "\n",
    "plt.plot(st_array, delta_array)\n",
    "plt.scatter(st_array, delta_array, color = 'red')\n",
    "plt.xlim(0,100)\n",
    "plt.ylim(0,1)\n",
    "plt.xlabel('Stock Price at time t (in $)')\n",
    "plt.ylabel('Delta')\n",
    "plt.title('Delta Hedging')\n",
    "\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
